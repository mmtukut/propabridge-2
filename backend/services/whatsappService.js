const Property = require('../models/Property');
const Conversation = require('../models/Conversation');
const aiService = require('./aiService');

const handleIncomingMessage = async (message) => {
  try {
    console.log('=== PROCESSING INCOMING MESSAGE ===');
    console.log('Full message object:', JSON.stringify(message, null, 2));
    
    // 1. Get user's phone number and message
    const userPhone = message.from;
    const userMessage = message.text?.body || 'No text content';
    
    console.log(`Processing message from ${userPhone}: "${userMessage}"`);

    // 2. Save the incoming message to the database
    console.log('Saving message to database...');
    let conversation;
    try {
      conversation = await Conversation.create({
        phone: userPhone,
        message: userMessage,
      });
      console.log('Message saved to database with ID:', conversation.id);
    } catch (dbError) {
      console.error('Error saving to database:', dbError);
      throw new Error(`Database error: ${dbError.message}`);
    }

    // 3. Use AI to understand the message and generate a response
    console.log('Processing message with AI service...');
    const aiResult = await aiService.processMessage(userMessage, userPhone);
    console.log('AI processing complete. Intent:', aiResult.intent);

    // 4. Send the response back to the user
    if (aiResult.response) {
      console.log('Sending AI response to user...');
      await sendWhatsAppMessage(userPhone, aiResult.response);
      console.log('Response sent successfully.');
    } else {
      console.log('No response generated by AI.');
    }

    // 5. Update the conversation log with the AI's analysis and response
    console.log('Updating conversation in database...');
    try {
      await conversation.update({
        intent: aiResult.intent,
        response: aiResult.response,
      });
      console.log('Conversation updated successfully.');
    } catch (dbError) {
      console.error('Error updating conversation:', dbError);
      // We don't re-throw here because the main task (sending a reply) is done
    }

    console.log('--- Message processing complete ---');
    return { success: true, conversationId: conversation.id };
  } catch (error) {
    console.error('Error in handleIncomingMessage:', {
      error: error.message,
      stack: error.stack,
      message: message ? JSON.stringify(message) : 'No message object'
    });
    throw error; // Re-throw to be handled by the caller
  }
};

/**
 * Sends a WhatsApp message using the WhatsApp Business API
 * @param {string} to - Recipient's phone number in international format (e.g., '1234567890')
 * @param {string|object} message - The message content (string for text, object for structured messages)
 * @param {string} [messageType='text'] - Type of message ('text', 'image', 'document', 'template')
 * @returns {Promise<object>} - The API response
 */
const sendWhatsAppMessage = async (to, message, messageType = 'text') => {
  try {
    // Input validation
    if (!to) {
      throw new Error('Recipient phone number is required');
    }
    if (!message) {
      throw new Error('Message content is required');
    }

    // Ensure phone number is in the correct format
    const phoneNumberId = to.replace(/[^0-9]/g, '');
    if (phoneNumberId.length < 10 || phoneNumberId.length > 15) {
      throw new Error('Invalid phone number format');
    }

    // Get WhatsApp API credentials from environment variables
    const WHATSAPP_TOKEN = process.env.WHATSAPP_ACCESS_TOKEN;
    const PHONE_NUMBER_ID = process.env.WHATSAPP_PHONE_NUMBER_ID;

    if (!WHATSAPP_TOKEN || !PHONE_NUMBER_ID) {
      throw new Error('WhatsApp API credentials are not properly configured');
    }

    // Prepare the API URL with the latest stable API version
    const url = `https://graph.facebook.com/v22.0/${PHONE_NUMBER_ID}/messages`;

    // Prepare the request payload based on message type
    let payload = {
      messaging_product: 'whatsapp',
      recipient_type: 'individual',
      to: phoneNumberId,
    };

    // Handle different message types
    if (messageType === 'text') {
      payload.type = 'text';
      payload.text = { body: message };
    } else if (messageType === 'template') {
      // Handle template messages
      payload.type = 'template';
      payload.template = {
        name: message.name,
        language: { code: message.language || 'en' },
        components: message.components || []
      };
    } else {
      // For other message types (image, document, etc.)
      payload.type = messageType;
      payload[messageType] = message;
    }

    console.log('Sending WhatsApp message:', {
      to: phoneNumberId,
      type: messageType,
      payload: JSON.stringify(payload, null, 2)
    });

    // Make the API request
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${WHATSAPP_TOKEN}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(payload),
    });

    const responseData = await response.json();

    if (!response.ok) {
      console.error('Error sending WhatsApp message:', {
        status: response.status,
        statusText: response.statusText,
        error: responseData.error
      });
      throw new Error(`Failed to send message: ${responseData.error?.message || 'Unknown error'}`);
    }

    console.log('Successfully sent WhatsApp message:', responseData);
    return responseData;

  } catch (error) {
    console.error('Error in sendWhatsAppMessage:', {
      error: error.message,
      stack: error.stack,
      to,
      messageType
    });
    throw error; // Re-throw to be handled by the caller
  }
};

module.exports = {
  handleIncomingMessage,
  sendWhatsAppMessage,
};
